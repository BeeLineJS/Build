module.exports = build;

const pfs = require('fs').promises;
const fs = require('fs');
const path = require('path');

async function walk(dir, fileList = []) {
   const files = await pfs.readdir(dir);
   for (const file of files) {
      const stat = await pfs.stat(path.join(dir, file));
      if (stat.isDirectory()) {
         fileList = await walk(path.join(dir, file), fileList);
         continue;
      }

      const segments = dir.split('\\');
      const parentFolder = segments[segments.length - 1];
      if (file === parentFolder + '.html') {
         const filePath = path.join(dir, file);
         fileList.push(filePath);
      }
   }
   return fileList;
}

function build(dir) {
   console.log(`build layouts: ${dir}`);

   const layouts = [];
   walk(dir).then((files) => {
      for (let i = 0; i < files.length; i++) {
         const filePath = files[i];
         const segments = filePath.split('\\');
         let name = segments.pop();
         name = name.replace('.html', '')
         createTemplateJs(filePath);
         layouts.push(`'${name}': require('./${name}/${name}.html.js')`);
      }
      generateComponents(dir, layouts);
   });
}

function generateComponents(dir, layouts) {

   let js = `// auto generated by build/layouts.js

module.exports = get;

const layouts = {
   ${layouts.join(',\n\t')}
};

function get(type) {
   if (layouts[type] == null) {
      console.log('layout not found for ', type);
   }

   return layouts[type]();
}`;

   js = js.replace(/\uFEFF/g, '');
   fs.writeFileSync(`${dir}\\factory.js`, js, 'utf8', function (err) { });
}

function createTemplateJs(filePath) {

   const html = fs.readFileSync(filePath, 'utf8');
   let js = `// auto generated by build/layouts.js

    function get() {
      return \`${html}\`;
   }

   module.exports =  get;
  `;

   js = js.replace(/\uFEFF/g, '');
   fs.writeFileSync(filePath + '.js', js, 'utf8', function (err) {
      console.log(err)
   });
}